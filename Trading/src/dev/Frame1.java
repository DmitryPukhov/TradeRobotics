/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dev;

import java.util.logging.Logger;
import org.encog.engine.network.activation.ActivationLinear;
import org.encog.mathutil.randomize.RangeRandomizer;
import org.encog.ml.data.MLData;
import org.encog.ml.data.MLDataSet;
import org.encog.ml.data.basic.BasicMLData;
import org.encog.ml.data.basic.BasicMLDataSet;
import org.encog.ml.genetic.MLMethodGenomeFactory;
import org.encog.neural.networks.BasicNetwork;
import org.encog.neural.networks.training.Train;
import org.encog.neural.networks.training.propagation.resilient.ResilientPropagation;
import org.encog.neural.pattern.FeedForwardPattern;
import trading.common.NeuralContext.Training;

/**
 *
 * @author pdg
 */
public class Frame1 extends javax.swing.JFrame {

        
   /**
    * Create a new network
    * @return 
    */
   public  BasicNetwork createNetwork() {
      
       
        final FeedForwardPattern pattern = new FeedForwardPattern();
        // Set layers

        pattern.setInputNeurons(Data.testInput[0].length);
       // pattern.addHiddenLayer(Data.testInput[0].length);
        //pattern.addHiddenLayer(Config.getHidden2Count());
        pattern.setOutputNeurons(Data.testIdealOutput[0].length);
        // Activation functioni
        //pattern.setActivationFunction(new ActivationTANH());
        pattern.setActivationFunction(new ActivationLinear());
        //pattern.setActivationFunction(new ActivationElliott());

        // Create network
        final BasicNetwork network = (BasicNetwork) pattern.generate();
        network.reset();
//        
//        int layers = network.getLayerCount();
//        for(int i = 0; i < layers; i ++){
//            int neurons = network.getLayerNeuronCount(i);
//            int n = neurons + 1;
//        }
        
        return network;
    }   
   /**
    * Train using Data class
    * @param network
    * @param ds 
    */
   public void trainNetwork(BasicNetwork network, MLDataSet ds){

           // train the neural network

 
        ResilientPropagation train = new ResilientPropagation(network, ds);
       // train.setThreadCount(10);
        for (int epoch = 0; epoch < 1000; epoch++) {
            // Print info
                 // Iteration
            train.iteration();
            String weights = network.dumpWeights();
            weightsTextArea.setText(weights);
            // Print info
            // Calculate error
            double error = train.getError();
   
            Logger.getLogger(Frame1.class.getName()).info(String.format("Epoch %d. Error %s", epoch, Double.toString(error)));
        }
        String resultWeights = network.dumpWeights();

   }
   /**
    * Test with test data
    * @param network 
    */
   public void testNetwork(BasicNetwork network, MLDataSet ds){
       //Data.getTestMLDataSet();
       int base = 101;
       for(int i = 0; i < ds.size(); i++){
           double[] input = ds.get(i).getInputArray();
           MLData inputData = new BasicMLData(input);
           double[] ideal = ds.get(i).getIdealArray();
           MLData outputData = network.compute(inputData);
           double value = outputData.getData(0);
           Logger.getLogger(Frame1.class.getName()).info(String.format("Iteration %d. output %s", i, Double.toString(value)));           
       }
   }
   
   
     
    /**
     * Creates new form Frame1
     */
    public Frame1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trainButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        weightsTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        trainButton.setText("Train");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });

        weightsTextArea.setColumns(20);
        weightsTextArea.setRows(5);
        jScrollPane1.setViewportView(weightsTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(0, 292, Short.MAX_VALUE)
                        .addComponent(trainButton)))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trainButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(183, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed
        Data.initRandomData();
        
        MLDataSet ds = Data.getTrainMLDataSet();
        MLDataSet testDs = Data.getTestMLDataSet(Context.testSamples);

        BasicNetwork network =  createNetwork();
        trainNetwork(network, ds);
        testNetwork(network, testDs);
    }//GEN-LAST:event_trainButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame1().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton trainButton;
    private javax.swing.JTextArea weightsTextArea;
    // End of variables declaration//GEN-END:variables
}
