/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dev;

import java.util.logging.Logger;
import org.encog.engine.network.activation.ActivationLinear;
import org.encog.ml.data.MLData;
import org.encog.ml.data.MLDataSet;
import org.encog.ml.data.basic.BasicMLData;
import org.encog.ml.data.basic.BasicMLDataSet;
import org.encog.neural.networks.BasicNetwork;
import org.encog.neural.networks.training.propagation.resilient.ResilientPropagation;
import org.encog.neural.pattern.FeedForwardPattern;
import org.encog.util.Stopwatch;

/**
 *
 * @author pdg
 */
public class Form1 extends javax.swing.JFrame {
   
       final int inputSize = 10;
        final int outputSize = 1;
        final int hiddenSize = 5;
        final int samples = 10;  
        final int epochCount = 10;
        
        final int testSamples = 10;
    /**
     * Creates new form Form1
     */
    public Form1() {
        initComponents();
        
        //getMLDataSet();
    }
    
   public  BasicNetwork createNetwork() {
        final FeedForwardPattern pattern = new FeedForwardPattern();
        // Set layers

        pattern.setInputNeurons(inputSize);
        pattern.addHiddenLayer(hiddenSize);
        //pattern.addHiddenLayer(Config.getHidden2Count());
        pattern.setOutputNeurons(outputSize);
        // Activation functioni
        //pattern.setActivationFunction(new ActivationTANH());
        pattern.setActivationFunction(new ActivationLinear());
        //pattern.setActivationFunction(new ActivationElliott());

        // Create network
        final BasicNetwork network = (BasicNetwork) pattern.generate();
        network.reset();
        
        return network;
    }   
   
   public void trainNetwork(BasicNetwork network, MLDataSet ds){
        
       // Backpropagation training
        ResilientPropagation train = new ResilientPropagation(network, ds);
        
        //Backpropagation train = new Backpropagation(network, ds);
        train.setThreadCount(10);



        for (int epoch = 1; epoch <= epochCount; epoch++) {
            // Print info
                 // Iteration
            train.iteration();

            // Print info
            // Calculate error
            double error = train.getError();
   
            Logger.getLogger(Form1.class.getName()).info(String.format("Epoch %d. Error %s", epoch, Double.toString(error)));
        }
        train.finishTraining();      
        
   }
   
   public void testNetwork(BasicNetwork network){
       int base = 101;
       for(int i = 0; i < testSamples; i++){
           double[] input = getInputData(base);
           MLData inputData = new BasicMLData(input);
           double[] ideal = getIdealOutputData(input);
           MLData outputData = network.compute(inputData);
           
       }
   }
   
   
    /**
     * MLDataSet creation
     * @return 
     */
    private MLDataSet getMLDataSet(){

        // Create input data
        double[][] inputSamples = new double[samples][inputSize];
        double[][] idealSamples = new double[samples][outputSize];
        // Fill input data
        for(int i = 0; i <samples; i++)
        {
            double[] inputData = getInputData(i);
            inputSamples[i] = inputData;
            
            double[] outputData = getIdealOutputData(inputData);
            idealSamples[i] = outputData;
        }
        
        MLDataSet ds = new BasicMLDataSet(inputSamples, idealSamples);
        return ds;

        // Create output data
        
    }
    private double[] getIdealOutputData(double[] inputData){
        double[] outputData = new double[outputSize];
        outputData[0] = inputData[0];
        return  outputData;
    }
    
    private double[] getInputData(int i){
        double[] inputData = new double[inputSize];
            inputData[0] = i;
            for(int j = 1; j < inputSize; j++){
                   inputData[j] = (i+j)/inputData[j-1];
            }    
            return inputData;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trainButton = new javax.swing.JButton();

        trainButton.setText("Train");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(325, Short.MAX_VALUE)
                .addComponent(trainButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trainButton)
                .addContainerGap(262, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed
        MLDataSet ds = getMLDataSet();
        BasicNetwork network =  createNetwork();
        trainNetwork(network, ds);
        testNetwork(network);
    }//GEN-LAST:event_trainButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton trainButton;
    // End of variables declaration//GEN-END:variables
}
