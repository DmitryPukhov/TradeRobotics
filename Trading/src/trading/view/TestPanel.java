/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package trading.view;

import java.awt.Color;
import java.awt.Cursor;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import trading.app.NeuralService;
import trading.common.NeuralContext;
import trading.common.PropertyNames;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.data.xy.XYDataItem;

/**
 * Neural network testNetwork panel
 *
 * @author pdg
 */
public class TestPanel extends javax.swing.JPanel {

    JFreeChart chart;
    XYSeries idealHighSeries;
    XYSeries idealLowSeries;
    XYSeries realHighSeries;
    XYSeries realLowSeries;

    /**
     * Creates new form TestPanel
     */
    public TestPanel() {
        // Test results chart creation
        createChart();

        initComponents();

        // Neural network related initialization
        init();
    }

    /**
     * Init JFreeChart
     */
    private void createChart() {
        // Create dataset and series
        TableXYDataset ds = new DefaultTableXYDataset();
        XYSeriesCollection xySeriesCollection = new XYSeriesCollection();
        idealHighSeries = new XYSeries("Ideal High");
        idealLowSeries = new XYSeries("Ideal Low");
        realHighSeries = new XYSeries("Real High");
        realLowSeries = new XYSeries("Real Low");
        xySeriesCollection.addSeries(idealHighSeries);
        xySeriesCollection.addSeries(idealLowSeries);
        xySeriesCollection.addSeries(realHighSeries);
        xySeriesCollection.addSeries(realLowSeries);
        // Create chart
        chart = ChartFactory.createXYLineChart("Price values", "Iteration", "Price", xySeriesCollection, PlotOrientation.VERTICAL, true, true, true);
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.getRangeAxis().setAutoRange(true);
        // Auto range
        NumberAxis valueAxis = (NumberAxis) plot.getRangeAxis();
        valueAxis.setAutoRangeIncludesZero(false);
        // Set line colors
        plot.getRenderer().setSeriesPaint(0, Color.GREEN);
        plot.getRenderer().setSeriesPaint(1, Color.GREEN);
        plot.getRenderer().setSeriesPaint(2, Color.BLUE);
        plot.getRenderer().setSeriesPaint(3, Color.BLUE);

        //plot.getDomainAxis().setRange(1, (double)NeuralContext.Test.getMaxIterationCount());
    }

    /**
     * Neural network related initialization
     */
    public final void init() {
        // Max iterations listener
        NeuralContext.Test.addPropertyChangeListener(PropertyNames.MAX_ITERATION_COUNT, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                // Set chart x range
                XYPlot plot = (XYPlot) chart.getPlot();
                plot.getDomainAxis().setRange(1, (double) NeuralContext.Test.getMaxIterationCount());
            }
        });
        // Iteration listener
        NeuralContext.Test.addPropertyChangeListener(PropertyNames.ITERATION, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                iterationLabel.setText(String.format("Iteration %d of %d", NeuralContext.Test.getIteration(), NeuralContext.Test.getMaxIterationCount()));
                iterationProgressBar.setMaximum(NeuralContext.Test.getMaxIterationCount());
                iterationProgressBar.setValue(NeuralContext.Test.getIteration());
            }
        });
        // Output entity listener
        NeuralContext.Test.addPropertyChangeListener(PropertyNames.REAL_OUTPUT_ENTITY, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                // Add values to the charat
                int iteration = NeuralContext.Test.getIteration();
                idealHighSeries.add(iteration, NeuralContext.Test.getIdealEntity().getAbsoluteHigh());
                idealLowSeries.add(iteration, NeuralContext.Test.getIdealEntity().getAbsoluteLow());
                realHighSeries.add(iteration, NeuralContext.Test.getRealEntity().getAbsoluteHigh());
                realLowSeries.add(iteration, NeuralContext.Test.getRealEntity().getAbsoluteLow());
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startButton = new javax.swing.JButton();
        iterationProgressBar = new javax.swing.JProgressBar();
        iterationLabel = new javax.swing.JLabel();
        chartPanel = new ChartPanel(chart);

        startButton.setText("Start test");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        iterationProgressBar.setStringPainted(true);

        iterationLabel.setText("Iteration");

        javax.swing.GroupLayout chartPanelLayout = new javax.swing.GroupLayout(chartPanel);
        chartPanel.setLayout(chartPanelLayout);
        chartPanelLayout.setHorizontalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        chartPanelLayout.setVerticalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 193, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iterationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startButton)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iterationProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                        .addGap(34, 34, 34))))
            .addComponent(chartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(iterationLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iterationProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Start testing
     *
     * @param evt
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        final TestPanel form = this;
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        // Run testNetwork in new thread
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    // Run testNetwork
                    NeuralService.testNetwork();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TestPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(TestPanel.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    form.setCursor(Cursor.getDefaultCursor());
                }
            }
        }).start();

    }//GEN-LAST:event_startButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPanel;
    private javax.swing.JLabel iterationLabel;
    private javax.swing.JProgressBar iterationProgressBar;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}
